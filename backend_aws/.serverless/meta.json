{
  "C:\\Users\\juan.guevara_pragma\\Documents\\AWS\\backend-aws": {
    "versionSfCore": null,
    "versionFramework": "4.4.18",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "sls": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "capacitacion",
            "app": "backend-aws",
            "service": "backend-aws",
            "stages": {
              "default": {
                "params": {
                  "tableName": "users-table-dev"
                }
              }
            },
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "httpApi": {
                "cors": true
              },
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem",
                        "sns:Publish"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "UsersTable",
                            "Arn"
                          ]
                        },
                        "arn:aws:sns:us-east-1:147997121225:userNotifications"
                      ]
                    }
                  ]
                }
              },
              "environment": {
                "USERS_TABLE": "users-table-dev",
                "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
              },
              "stage": "dev",
              "region": "us-east-1",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "GetUsersLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-getUsers"
                    }
                  },
                  "CreateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-createUser"
                    }
                  },
                  "UpdateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-updateUser"
                    }
                  },
                  "DeleteUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-deleteUser"
                    }
                  },
                  "SendEmailLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-sendEmail"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "backend-aws",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-aws-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-aws-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:Query",
                                  "dynamodb:Scan",
                                  "dynamodb:GetItem",
                                  "dynamodb:PutItem",
                                  "dynamodb:UpdateItem",
                                  "dynamodb:DeleteItem",
                                  "sns:Publish"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "UsersTable",
                                      "Arn"
                                    ]
                                  },
                                  "arn:aws:sns:us-east-1:147997121225:userNotifications"
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "backend-aws",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "GetUsersLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.getUsers",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-getUsers",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetUsersLogGroup"
                    ]
                  },
                  "CreateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.createUser",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-createUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateUserLogGroup"
                    ]
                  },
                  "UpdateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.updateUser",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-updateUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateUserLogGroup"
                    ]
                  },
                  "DeleteUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.deleteUser",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-deleteUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteUserLogGroup"
                    ]
                  },
                  "SendEmailLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.sendEmail",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-sendEmail",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SendEmailLogGroup"
                    ]
                  },
                  "GetUsersLambdaVersionckDYMqIn5fivklWJ5p8nSYlC8SfhGYbXwnv9uvVMIA": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetUsersLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "CreateUserLambdaVersionFu6ZDdfqJzaaY7e9EMeZeyi5d43YzDCw45aozCTltM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateUserLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "UpdateUserLambdaVersionFdJ6rL3uFnEIWkq6lNmtrGcKyATQBI9scVebtg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateUserLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "DeleteUserLambdaVersion2yl8LYEfqqiTJhNOFznOJHTuBubFBps5AMAyuYkQcKs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteUserLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "SendEmailLambdaVersionCPaNMiFeqIWq3hSALgERtipUzjuW4Myl0ARv55E1VZo": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SendEmailLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "HttpApi": {
                    "Type": "AWS::ApiGatewayV2::Api",
                    "Properties": {
                      "Name": "dev-backend-aws",
                      "ProtocolType": "HTTP",
                      "CorsConfiguration": {
                        "AllowCredentials": "<REDACTED>",
                        "AllowHeaders": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "AllowMethods": [
                          "OPTIONS",
                          "GET",
                          "POST",
                          "PUT",
                          "DELETE"
                        ],
                        "AllowOrigins": [
                          "*"
                        ]
                      }
                    }
                  },
                  "HttpApiStage": {
                    "Type": "AWS::ApiGatewayV2::Stage",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "StageName": "$default",
                      "AutoDeploy": true,
                      "DefaultRouteSettings": {
                        "DetailedMetricsEnabled": false
                      }
                    }
                  },
                  "GetUsersLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationGetUsers": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "GetUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetUsers": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /users",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationGetUsers"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationGetUsers"
                  },
                  "CreateUserLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationCreateUser": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostCreateuser": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /createUser",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationCreateUser"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationCreateUser"
                  },
                  "UpdateUserLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationUpdateUser": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePutUpdateuserIdVar": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "PUT /updateUser/{id}",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationUpdateUser"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationUpdateUser"
                  },
                  "DeleteUserLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationDeleteUser": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteDeleteDeleteuserIdVar": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "DELETE /deleteUser/{id}",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationDeleteUser"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationDeleteUser"
                  },
                  "SendEmailLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SendEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationSendEmail": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "SendEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostSendDashemail": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /send-email",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationSendEmail"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationSendEmail"
                  },
                  "UsersTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "TableName": "users-table-dev"
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                    "Export": {
                      "Name": "sls-backend-aws-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "GetUsersLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetUsersLambdaVersionckDYMqIn5fivklWJ5p8nSYlC8SfhGYbXwnv9uvVMIA"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-GetUsersLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateUserLambdaVersionFu6ZDdfqJzaaY7e9EMeZeyi5d43YzDCw45aozCTltM"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-CreateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateUserLambdaVersionFdJ6rL3uFnEIWkq6lNmtrGcKyATQBI9scVebtg"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-UpdateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteUserLambdaVersion2yl8LYEfqqiTJhNOFznOJHTuBubFBps5AMAyuYkQcKs"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-DeleteUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "SendEmailLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SendEmailLambdaVersionCPaNMiFeqIWq3hSALgERtipUzjuW4Myl0ARv55E1VZo"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-SendEmailLambdaFunctionQualifiedArn"
                    }
                  },
                  "HttpApiId": {
                    "Description": "Id of the HTTP API",
                    "Value": {
                      "Ref": "HttpApi"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-HttpApiId"
                    }
                  },
                  "HttpApiUrl": {
                    "Description": "URL of the HTTP API",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "HttpApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          }
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-HttpApiUrl"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "getUsers": {
                "handler": "handler.getUsers",
                "events": [
                  {
                    "httpApi": {
                      "path": "/users",
                      "method": "get"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/users"
                  }
                ],
                "name": "backend-aws-dev-getUsers",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetUsersLambdaVersionckDYMqIn5fivklWJ5p8nSYlC8SfhGYbXwnv9uvVMIA"
              },
              "createUser": {
                "handler": "handler.createUser",
                "events": [
                  {
                    "httpApi": {
                      "path": "/createUser",
                      "method": "post"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/createUser"
                  }
                ],
                "name": "backend-aws-dev-createUser",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "CreateUserLambdaVersionFu6ZDdfqJzaaY7e9EMeZeyi5d43YzDCw45aozCTltM"
              },
              "updateUser": {
                "handler": "handler.updateUser",
                "events": [
                  {
                    "httpApi": {
                      "path": "/updateUser/{id}",
                      "method": "put"
                    },
                    "resolvedMethod": "PUT",
                    "resolvedPath": "/updateUser/{id}"
                  }
                ],
                "name": "backend-aws-dev-updateUser",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdateUserLambdaVersionFdJ6rL3uFnEIWkq6lNmtrGcKyATQBI9scVebtg"
              },
              "deleteUser": {
                "handler": "handler.deleteUser",
                "events": [
                  {
                    "httpApi": {
                      "path": "/deleteUser/{id}",
                      "method": "delete"
                    },
                    "resolvedMethod": "DELETE",
                    "resolvedPath": "/deleteUser/{id}"
                  }
                ],
                "name": "backend-aws-dev-deleteUser",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "DeleteUserLambdaVersion2yl8LYEfqqiTJhNOFznOJHTuBubFBps5AMAyuYkQcKs"
              },
              "sendEmail": {
                "handler": "handler.sendEmail",
                "events": [
                  {
                    "httpApi": {
                      "path": "/send-email",
                      "method": "post"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/send-email"
                  }
                ],
                "name": "backend-aws-dev-sendEmail",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "SendEmailLambdaVersionCPaNMiFeqIWq3hSALgERtipUzjuW4Myl0ARv55E1VZo"
              }
            },
            "resources": {
              "Resources": {
                "UsersTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "TableName": "users-table-dev"
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "C:\\Users\\juan.guevara_pragma\\Documents\\AWS\\backend-aws",
          "config": {
            "type": "sls"
          },
          "options": {},
          "stage": "dev",
          "logger": {
            "namespace": "s:core:resolver:sls",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "default-aws-credential-resolver": "<REDACTED>",
      "param": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "capacitacion",
            "app": "backend-aws",
            "service": "backend-aws",
            "stages": {
              "default": {
                "params": {
                  "tableName": "users-table-dev"
                }
              }
            },
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "httpApi": {
                "cors": true
              },
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem",
                        "sns:Publish"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "UsersTable",
                            "Arn"
                          ]
                        },
                        "arn:aws:sns:us-east-1:147997121225:userNotifications"
                      ]
                    }
                  ]
                }
              },
              "environment": {
                "USERS_TABLE": "users-table-dev",
                "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
              },
              "stage": "dev",
              "region": "us-east-1",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "GetUsersLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-getUsers"
                    }
                  },
                  "CreateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-createUser"
                    }
                  },
                  "UpdateUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-updateUser"
                    }
                  },
                  "DeleteUserLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-deleteUser"
                    }
                  },
                  "SendEmailLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/backend-aws-dev-sendEmail"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "backend-aws",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-aws-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-aws-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:Query",
                                  "dynamodb:Scan",
                                  "dynamodb:GetItem",
                                  "dynamodb:PutItem",
                                  "dynamodb:UpdateItem",
                                  "dynamodb:DeleteItem",
                                  "sns:Publish"
                                ],
                                "Resource": [
                                  {
                                    "Fn::GetAtt": [
                                      "UsersTable",
                                      "Arn"
                                    ]
                                  },
                                  "arn:aws:sns:us-east-1:147997121225:userNotifications"
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "backend-aws",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "GetUsersLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.getUsers",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-getUsers",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetUsersLogGroup"
                    ]
                  },
                  "CreateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.createUser",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-createUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateUserLogGroup"
                    ]
                  },
                  "UpdateUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.updateUser",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-updateUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "UpdateUserLogGroup"
                    ]
                  },
                  "DeleteUserLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.deleteUser",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-deleteUser",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteUserLogGroup"
                    ]
                  },
                  "SendEmailLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                        "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                      },
                      "Handler": "handler.sendEmail",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "backend-aws-dev-sendEmail",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "USERS_TABLE": "users-table-dev",
                          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "SendEmailLogGroup"
                    ]
                  },
                  "GetUsersLambdaVersionckDYMqIn5fivklWJ5p8nSYlC8SfhGYbXwnv9uvVMIA": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetUsersLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "CreateUserLambdaVersionFu6ZDdfqJzaaY7e9EMeZeyi5d43YzDCw45aozCTltM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateUserLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "UpdateUserLambdaVersionFdJ6rL3uFnEIWkq6lNmtrGcKyATQBI9scVebtg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "UpdateUserLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "DeleteUserLambdaVersion2yl8LYEfqqiTJhNOFznOJHTuBubFBps5AMAyuYkQcKs": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteUserLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "SendEmailLambdaVersionCPaNMiFeqIWq3hSALgERtipUzjuW4Myl0ARv55E1VZo": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "SendEmailLambdaFunction"
                      },
                      "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
                    }
                  },
                  "HttpApi": {
                    "Type": "AWS::ApiGatewayV2::Api",
                    "Properties": {
                      "Name": "dev-backend-aws",
                      "ProtocolType": "HTTP",
                      "CorsConfiguration": {
                        "AllowCredentials": "<REDACTED>",
                        "AllowHeaders": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "AllowMethods": [
                          "OPTIONS",
                          "GET",
                          "POST",
                          "PUT",
                          "DELETE"
                        ],
                        "AllowOrigins": [
                          "*"
                        ]
                      }
                    }
                  },
                  "HttpApiStage": {
                    "Type": "AWS::ApiGatewayV2::Stage",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "StageName": "$default",
                      "AutoDeploy": true,
                      "DefaultRouteSettings": {
                        "DetailedMetricsEnabled": false
                      }
                    }
                  },
                  "GetUsersLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationGetUsers": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "GetUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetUsers": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /users",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationGetUsers"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationGetUsers"
                  },
                  "CreateUserLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationCreateUser": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostCreateuser": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /createUser",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationCreateUser"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationCreateUser"
                  },
                  "UpdateUserLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationUpdateUser": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePutUpdateuserIdVar": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "PUT /updateUser/{id}",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationUpdateUser"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationUpdateUser"
                  },
                  "DeleteUserLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationDeleteUser": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteDeleteDeleteuserIdVar": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "DELETE /deleteUser/{id}",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationDeleteUser"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationDeleteUser"
                  },
                  "SendEmailLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "SendEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationSendEmail": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "SendEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostSendDashemail": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /send-email",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationSendEmail"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationSendEmail"
                  },
                  "UsersTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "userId",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "userId",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST",
                      "TableName": "users-table-dev"
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                    "Export": {
                      "Name": "sls-backend-aws-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "GetUsersLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetUsersLambdaVersionckDYMqIn5fivklWJ5p8nSYlC8SfhGYbXwnv9uvVMIA"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-GetUsersLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateUserLambdaVersionFu6ZDdfqJzaaY7e9EMeZeyi5d43YzDCw45aozCTltM"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-CreateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "UpdateUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "UpdateUserLambdaVersionFdJ6rL3uFnEIWkq6lNmtrGcKyATQBI9scVebtg"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-UpdateUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteUserLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteUserLambdaVersion2yl8LYEfqqiTJhNOFznOJHTuBubFBps5AMAyuYkQcKs"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-DeleteUserLambdaFunctionQualifiedArn"
                    }
                  },
                  "SendEmailLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "SendEmailLambdaVersionCPaNMiFeqIWq3hSALgERtipUzjuW4Myl0ARv55E1VZo"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-SendEmailLambdaFunctionQualifiedArn"
                    }
                  },
                  "HttpApiId": {
                    "Description": "Id of the HTTP API",
                    "Value": {
                      "Ref": "HttpApi"
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-HttpApiId"
                    }
                  },
                  "HttpApiUrl": {
                    "Description": "URL of the HTTP API",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "HttpApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          }
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-backend-aws-dev-HttpApiUrl"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "getUsers": {
                "handler": "handler.getUsers",
                "events": [
                  {
                    "httpApi": {
                      "path": "/users",
                      "method": "get"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/users"
                  }
                ],
                "name": "backend-aws-dev-getUsers",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetUsersLambdaVersionckDYMqIn5fivklWJ5p8nSYlC8SfhGYbXwnv9uvVMIA"
              },
              "createUser": {
                "handler": "handler.createUser",
                "events": [
                  {
                    "httpApi": {
                      "path": "/createUser",
                      "method": "post"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/createUser"
                  }
                ],
                "name": "backend-aws-dev-createUser",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "CreateUserLambdaVersionFu6ZDdfqJzaaY7e9EMeZeyi5d43YzDCw45aozCTltM"
              },
              "updateUser": {
                "handler": "handler.updateUser",
                "events": [
                  {
                    "httpApi": {
                      "path": "/updateUser/{id}",
                      "method": "put"
                    },
                    "resolvedMethod": "PUT",
                    "resolvedPath": "/updateUser/{id}"
                  }
                ],
                "name": "backend-aws-dev-updateUser",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "UpdateUserLambdaVersionFdJ6rL3uFnEIWkq6lNmtrGcKyATQBI9scVebtg"
              },
              "deleteUser": {
                "handler": "handler.deleteUser",
                "events": [
                  {
                    "httpApi": {
                      "path": "/deleteUser/{id}",
                      "method": "delete"
                    },
                    "resolvedMethod": "DELETE",
                    "resolvedPath": "/deleteUser/{id}"
                  }
                ],
                "name": "backend-aws-dev-deleteUser",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "DeleteUserLambdaVersion2yl8LYEfqqiTJhNOFznOJHTuBubFBps5AMAyuYkQcKs"
              },
              "sendEmail": {
                "handler": "handler.sendEmail",
                "events": [
                  {
                    "httpApi": {
                      "path": "/send-email",
                      "method": "post"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/send-email"
                  }
                ],
                "name": "backend-aws-dev-sendEmail",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "SendEmailLambdaVersionCPaNMiFeqIWq3hSALgERtipUzjuW4Myl0ARv55E1VZo"
              }
            },
            "resources": {
              "Resources": {
                "UsersTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST",
                    "TableName": "users-table-dev"
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "C:\\Users\\juan.guevara_pragma\\Documents\\AWS\\backend-aws",
          "config": {
            "type": "param"
          },
          "options": {},
          "stage": "dev",
          "dashboard": {
            "aws": {
              "accessKeyId": "<REDACTED>",
              "secretAccessKey": "<REDACTED>",
              "sessionToken": "<REDACTED>",
              "$source": {
                "CREDENTIALS_CODE": "<REDACTED>"
              }
            },
            "params": null,
            "accessKey": "<REDACTED>"
          },
          "logger": {
            "namespace": "s:core:resolver:param",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\juan.guevara_pragma\\Documents\\AWS\\backend-aws",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "capacitacion",
      "app": "backend-aws",
      "service": "backend-aws",
      "stages": {
        "default": {
          "params": {
            "tableName": "users-table-dev"
          }
        }
      },
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "httpApi": {
          "cors": true
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "sns:Publish"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "UsersTable",
                      "Arn"
                    ]
                  },
                  "arn:aws:sns:us-east-1:147997121225:userNotifications"
                ]
              }
            ]
          }
        },
        "environment": {
          "USERS_TABLE": "users-table-dev",
          "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
          "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
          "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
          "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
        },
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetUsersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-aws-dev-getUsers"
              }
            },
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-aws-dev-createUser"
              }
            },
            "UpdateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-aws-dev-updateUser"
              }
            },
            "DeleteUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-aws-dev-deleteUser"
              }
            },
            "SendEmailLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/backend-aws-dev-sendEmail"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "backend-aws",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-aws-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-aws-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem",
                            "sns:Publish"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "UsersTable",
                                "Arn"
                              ]
                            },
                            "arn:aws:sns:us-east-1:147997121225:userNotifications"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "backend-aws",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetUsersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                  "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                },
                "Handler": "handler.getUsers",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-aws-dev-getUsers",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "users-table-dev",
                    "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                    "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                    "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                    "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUsersLogGroup"
              ]
            },
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                  "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                },
                "Handler": "handler.createUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-aws-dev-createUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "users-table-dev",
                    "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                    "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                    "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                    "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "UpdateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                  "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                },
                "Handler": "handler.updateUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-aws-dev-updateUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "users-table-dev",
                    "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                    "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                    "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                    "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserLogGroup"
              ]
            },
            "DeleteUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                  "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                },
                "Handler": "handler.deleteUser",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-aws-dev-deleteUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "users-table-dev",
                    "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                    "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                    "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                    "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteUserLogGroup"
              ]
            },
            "SendEmailLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
                  "S3Key": "serverless/backend-aws/dev/1736877563889-2025-01-14T17:59:23.889Z/backend-aws.zip"
                },
                "Handler": "handler.sendEmail",
                "Runtime": "nodejs20.x",
                "FunctionName": "backend-aws-dev-sendEmail",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "USERS_TABLE": "users-table-dev",
                    "URL_BASE_DATOS": "https://dynamodb.us-east-1.amazonaws.com",
                    "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:147997121225:userNotifications",
                    "ROL_IAM_AWS": "arn:aws:iam::147997121225:role/backend-aws-dev-us-east-1-lambdaRole",
                    "COGNITO_USER_POOL_ID": "arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SendEmailLogGroup"
              ]
            },
            "GetUsersLambdaVersionckDYMqIn5fivklWJ5p8nSYlC8SfhGYbXwnv9uvVMIA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUsersLambdaFunction"
                },
                "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
              }
            },
            "CreateUserLambdaVersionFu6ZDdfqJzaaY7e9EMeZeyi5d43YzDCw45aozCTltM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
              }
            },
            "UpdateUserLambdaVersionFdJ6rL3uFnEIWkq6lNmtrGcKyATQBI9scVebtg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserLambdaFunction"
                },
                "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
              }
            },
            "DeleteUserLambdaVersion2yl8LYEfqqiTJhNOFznOJHTuBubFBps5AMAyuYkQcKs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteUserLambdaFunction"
                },
                "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
              }
            },
            "SendEmailLambdaVersionCPaNMiFeqIWq3hSALgERtipUzjuW4Myl0ARv55E1VZo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SendEmailLambdaFunction"
                },
                "CodeSha256": "ZAnr1DYYq2YO/kxcj+bwt6a9zlMZ7HaRJF8QiomnjEo="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-backend-aws",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "AllowMethods": [
                    "OPTIONS",
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "GetUsersLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetUsers": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetUsers": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /users",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetUsers"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetUsers"
            },
            "CreateUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCreateuser": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /createUser",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateUser"
            },
            "UpdateUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutUpdateuserIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /updateUser/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateUser"
            },
            "DeleteUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteDeleteuserIdVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /deleteUser/{id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteUser"
            },
            "SendEmailLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SendEmailLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationSendEmail": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "SendEmailLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostSendDashemail": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /send-email",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationSendEmail"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationSendEmail"
            },
            "UsersTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "TableName": "users-table-dev"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
              "Export": {
                "Name": "sls-backend-aws-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetUsersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUsersLambdaVersionckDYMqIn5fivklWJ5p8nSYlC8SfhGYbXwnv9uvVMIA"
              },
              "Export": {
                "Name": "sls-backend-aws-dev-GetUsersLambdaFunctionQualifiedArn"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersionFu6ZDdfqJzaaY7e9EMeZeyi5d43YzDCw45aozCTltM"
              },
              "Export": {
                "Name": "sls-backend-aws-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserLambdaVersionFdJ6rL3uFnEIWkq6lNmtrGcKyATQBI9scVebtg"
              },
              "Export": {
                "Name": "sls-backend-aws-dev-UpdateUserLambdaFunctionQualifiedArn"
              }
            },
            "DeleteUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteUserLambdaVersion2yl8LYEfqqiTJhNOFznOJHTuBubFBps5AMAyuYkQcKs"
              },
              "Export": {
                "Name": "sls-backend-aws-dev-DeleteUserLambdaFunctionQualifiedArn"
              }
            },
            "SendEmailLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SendEmailLambdaVersionCPaNMiFeqIWq3hSALgERtipUzjuW4Myl0ARv55E1VZo"
              },
              "Export": {
                "Name": "sls-backend-aws-dev-SendEmailLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-backend-aws-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-backend-aws-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getUsers": {
          "handler": "handler.getUsers",
          "events": [
            {
              "httpApi": {
                "path": "/users",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/users"
            }
          ],
          "name": "backend-aws-dev-getUsers",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetUsersLambdaVersionckDYMqIn5fivklWJ5p8nSYlC8SfhGYbXwnv9uvVMIA"
        },
        "createUser": {
          "handler": "handler.createUser",
          "events": [
            {
              "httpApi": {
                "path": "/createUser",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/createUser"
            }
          ],
          "name": "backend-aws-dev-createUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersionFu6ZDdfqJzaaY7e9EMeZeyi5d43YzDCw45aozCTltM"
        },
        "updateUser": {
          "handler": "handler.updateUser",
          "events": [
            {
              "httpApi": {
                "path": "/updateUser/{id}",
                "method": "put"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/updateUser/{id}"
            }
          ],
          "name": "backend-aws-dev-updateUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateUserLambdaVersionFdJ6rL3uFnEIWkq6lNmtrGcKyATQBI9scVebtg"
        },
        "deleteUser": {
          "handler": "handler.deleteUser",
          "events": [
            {
              "httpApi": {
                "path": "/deleteUser/{id}",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/deleteUser/{id}"
            }
          ],
          "name": "backend-aws-dev-deleteUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteUserLambdaVersion2yl8LYEfqqiTJhNOFznOJHTuBubFBps5AMAyuYkQcKs"
        },
        "sendEmail": {
          "handler": "handler.sendEmail",
          "events": [
            {
              "httpApi": {
                "path": "/send-email",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/send-email"
            }
          ],
          "name": "backend-aws-dev-sendEmail",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SendEmailLambdaVersionCPaNMiFeqIWq3hSALgERtipUzjuW4Myl0ARv55E1VZo"
        }
      },
      "resources": {
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TableName": "users-table-dev"
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: capacitacion\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\napp: backend-aws\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\nservice: backend-aws\n\nstages:\n  default:\n    params:\n      tableName: \"users-table-${sls:stage}\"\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  httpApi:\n    cors: true\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:GetItem\n            - dynamodb:PutItem\n            - dynamodb:UpdateItem\n            - dynamodb:DeleteItem\n            - sns:Publish\n          Resource:\n            - Fn::GetAtt: [UsersTable, Arn]\n            - arn:aws:sns:us-east-1:147997121225:userNotifications\n  environment:\n    USERS_TABLE: ${param:tableName}\n    URL_BASE_DATOS: ${ssm:/myapp/url_base_datos}\n    SNS_TOPIC_ARN: ${ssm:/myapp/sns_topic_arn}\n    ROL_IAM_AWS: ${ssm:/myapp/rol_iam_aws}\n    COGNITO_USER_POOL_ID: 'arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa'\n\nfunctions:\n  getUsers:\n    handler: handler.getUsers\n    events:\n      - httpApi:\n          path: /users\n          method: get\n          # cors: true\n          # authorizer:\n          #   arn: arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa\n          #   resultTtlInSeconds: 0\n          #   identitySource: method.request.header.Authorization\n\n  createUser:\n    handler: handler.createUser\n    events:\n      - httpApi:\n          path: /createUser\n          method: post\n          # cors: true\n          # authorizer:\n          #   arn: arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa\n          #   resultTtlInSeconds: 0\n          #   identitySource: method.request.header.Authorization\n\n  updateUser:\n    handler: handler.updateUser\n    events:\n      - httpApi:\n          path: /updateUser/{id}\n          method: put\n          # cors: true\n          # authorizer:\n          #   arn: arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa\n          #   resultTtlInSeconds: 0\n          #   identitySource: method.request.header.Authorization\n\n  deleteUser:\n    handler: handler.deleteUser\n    events:\n      - httpApi:\n          path: /deleteUser/{id}\n          method: delete\n          # cors: true\n          # authorizer:\n          #   arn: arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa\n          #   resultTtlInSeconds: 0\n          #   identitySource: method.request.header.Authorization\n\n  sendEmail:\n    handler: handler.sendEmail\n    events:\n      - httpApi:\n          path: /send-email\n          method: post\n          # authorizer:\n          #   arn: arn:aws:cognito-idp:us-east-1:147997121225:userpool/us-east-1_BunF09iaa\n          #   resultTtlInSeconds: 0\n          #   identitySource: method.request.header.Authorization\n\nresources:\n  Resources:\n    UsersTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        AttributeDefinitions:\n          - AttributeName: userId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: userId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        TableName: ${param:tableName}\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {
      "tableName": "users-table-dev"
    },
    "machineId": "0e868f80e50745d4dab5409047265234",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "2daafd4e-d811-46f7-ac03-3aff2c04615e",
    "orgName": "capacitacion",
    "userId": "5jxTrg7nJM2XhtmTyl",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "VrwPdK3MfngTCC9PbS",
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>",
        "$source": {
          "CREDENTIALS_CODE": "<REDACTED>"
        }
      },
      "instanceParameters": null
    },
    "userName": "capacitacion",
    "subscription": null,
    "userEmail": "juanpa2062@hotmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "147997121225",
    "projectType": "traditional",
    "versionSf": "4.4.18",
    "serviceProviderAwsCfStackName": "backend-aws-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:147997121225:stack/backend-aws-dev/5c9e4010-d2a0-11ef-8540-0affdd9e32b1",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:147997121225:stack/backend-aws-dev/5c9e4010-d2a0-11ef-8540-0affdd9e32b1",
    "serviceProviderAwsCfStackCreated": "2025-01-14T17:52:46.348Z",
    "serviceProviderAwsCfStackUpdated": "2025-01-14T17:59:44.632Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "DeleteUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:147997121225:function:backend-aws-dev-deleteUser:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-aws-dev-DeleteUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUsersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:147997121225:function:backend-aws-dev-getUsers:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-aws-dev-GetUsersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:147997121225:function:backend-aws-dev-updateUser:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-aws-dev-UpdateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:147997121225:function:backend-aws-dev-createUser:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-aws-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "86sdct8qxa",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-backend-aws-dev-HttpApiId"
      },
      {
        "OutputKey": "SendEmailLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:147997121225:function:backend-aws-dev-sendEmail:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-backend-aws-dev-SendEmailLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-4ef2c2ca-ffbe",
        "ExportName": "sls-backend-aws-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://86sdct8qxa.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-backend-aws-dev-HttpApiUrl"
      }
    ]
  }
}